@page "/login"
@using FinanceFlow.Client.Models
@using FinanceFlow.Client.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - FinanceFlow Pro</PageTitle>

<div class="login-container">
    <div class="login-card">
        <div class="text-center mb-4">
            <h2 class="login-title">Welcome Back</h2>
            <p class="text-muted">Sign in to your FinanceFlow Pro account</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
            <DataAnnotationsValidator />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="mb-3">
                <label for="email" class="form-label">Email Address</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>

            <div class="d-grid">
                <button type="submit" class="btn btn-primary btn-lg" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <span>Sign In</span>
                    }
                </button>
            </div>
        </EditForm>

        <div class="text-center mt-4">
            <p class="mb-0">Don't have an account? <a href="/register" class="text-decoration-none">Sign up here</a></p>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
    }

    .login-card {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        padding: 2.5rem;
        width: 100%;
        max-width: 400px;
    }

    .login-title {
        color: #333;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border-radius: 0.5rem;
        border: 2px solid #e9ecef;
        padding: 0.75rem 1rem;
        transition: all 0.3s ease;
    }

    .form-control:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        transition: transform 0.2s ease;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 20px rgba(102, 126, 234, 0.3);
    }

    .btn-primary:disabled {
        transform: none;
        opacity: 0.7;
    }

    .alert {
        border-radius: 0.5rem;
        border: none;
    }
</style>

@code {
    private LoginModel loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var result = await AuthService.LoginAsync(loginModel);
            
            if (result != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Welcome back, {result.User.FirstName}!");
                Navigation.NavigateTo("/", true);
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during login. Please try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}